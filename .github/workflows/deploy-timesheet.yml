name: Deploy TimesheetDB, Build SSIS, and Run Data Migration

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/Timesheets/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  DATABASE_NAME: TimesheetDB
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: NewDataMigration
  SSIS_PROJECTS_FOLDER: Timesheets
  JOB_NAME: RunDataMigrationPackage
  PACKAGE_NAME: DataMigrationFINAL
  SQL_SERVER: MANAMELA
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Projects/Timesheets/Packages
  SSIS_PACKAGE_NAME: TimeSheetMigration 1.dtsx

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc
        shell: bash

      - name: Execute SQL Script (3 retries)
        run: |
          for i in 1 2 3; do
            /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -N -C -d master -i scripts/TimesheetDB.sql -o output.log && break
            echo "Attempt $i failed. Retrying in 5s..."
            sleep 5
          done
          cat output.log
        shell: bash

  build-ssis-project:
    runs-on: [self-hosted, windows]
    needs: deploy-database
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build SSIS Project (.dtproj)
        run: |
          msbuild "HandsOnProjects/Timesheets/Timesheets.dtproj" /p:Configuration=Development /p:OutputPath=bin\Development
        shell: powershell

  setup-and-execute-job:
    runs-on: [self-hosted, windows]
    needs: [deploy-database, build-ssis-project]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug Paths
        run: |
          Write-Output "SSIS ISPAC expected at: $env:GITHUB_WORKSPACE\${{ env.SSIS_SOURCE_PATH }}"
        shell: powershell

      - name: Deploy SSIS ISPAC to SSISDB
        run: |
          $ispacPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ env.SSIS_SOURCE_PATH }}"
          if (-not (Test-Path $ispacPath)) {
              throw "ISPAC not found at: $ispacPath"
          }

          $sql = @"
          USE SSISDB;
          DECLARE @ispac VARBINARY(MAX) = (SELECT * FROM OPENROWSET(BULK N'$ispacPath', SINGLE_BLOB) AS BinaryData);
          EXEC catalog.deploy_project
              @folder_name = N'${{ env.SSIS_DEST_FOLDER }}',
              @project_name = N'${{ env.SSIS_PROJECTS_FOLDER }}',
              @project_stream = @ispac;
          "@

          Set-Content -Path deploy_ssis.sql -Value $sql
          sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -i deploy_ssis.sql
        shell: powershell

      - name: Create SQL Agent Job
        run: |
          $sql = @"
          USE msdb;
          IF NOT EXISTS (SELECT name FROM sysjobs WHERE name = '${{ env.JOB_NAME }}')
          BEGIN
              DECLARE @jobId UNIQUEIDENTIFIER;
              EXEC sp_add_job @job_name=N'${{ env.JOB_NAME }}', @enabled=1, @owner_login_name=N'sa', @job_id = @jobId OUTPUT;
              EXEC sp_add_jobstep @job_id=@jobId, @step_name=N'Run SSIS', @subsystem=N'SSIS',
                   @command=N'/ISSERVER "\SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECTS_FOLDER }}\${{ env.PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER }}" /Par "$ServerOption::SYNCHRONIZED(Boolean)";True',
                   @on_success_action=1, @on_fail_action=2;
              EXEC sp_add_jobserver @job_id=@jobId, @server_name = N'(local)';
          END
          "@
          Set-Content -Path create_job.sql -Value $sql
          sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -i create_job.sql
        shell: powershell

      - name: Run SQL Agent Job
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'${{ env.JOB_NAME }}'"
          sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -Q "$sql"
        shell: powershell
