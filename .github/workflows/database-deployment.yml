name: Deploy TimesheetDB and Trigger SSIS Jobs

on:
  push:
    branches:
      - main
  paths:
    - 'scripts/**'
    - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  DATABASE_NAME: TimesheetDB
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Projects/Timesheets/Packages
  SSIS_PACKAGE_NAME: TimeSheetMigration 1.dtsx
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Execute SQL Script
        run: |
          if ! /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d master -i scripts/TimesheetDB.sql -o output.log; then
            echo "Error: SQL script execution failed. Check output.log for details."
            cat output.log
            exit 1
          fi
          echo "SQL script executed successfully."
          cat output.log

      - name: Trigger Sub-Main Workflow
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"deploy_ssis"}'

      - name: Setup SQL Server Agent Job
        run: |
          cat << 'EOF' > setup_job.sql
          USE msdb;
          IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = 'TimesheetProjectRun')
          BEGIN
              EXEC dbo.sp_add_job @job_name = N'TimesheetProjectRun';
              EXEC sp_add_jobstep
                  @job_name = N'TimesheetProjectRun',
                  @step_name = N'Run SSIS Package',
                  @subsystem = N'SSIS',
                  @command = N'/ISSERVER "\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::LOGGING_LEVEL(Int16)";1 /Par "$ServerOption::SYNCHRONIZED(Boolean)";True /CALLERINFO SQLAGENT /REPORTING E',
                  @database_name = N'master';
              EXEC dbo.sp_add_jobschedule
                  @job_name = N'TimesheetProjectRun',
                  @name = N'RunNow',
                  @enabled = 1,
                  @freq_type = 1,
                  @active_start_date = $(date +%Y%m%d),
                  @active_start_time = $(date +%H%M%S);
              EXEC dbo.sp_add_jobserver @job_name = N'TimesheetProjectRun';
          END
          ELSE
          BEGIN
              EXEC sp_update_jobstep
                  @job_name = N'TimesheetProjectRun',
                  @step_id = 1,
                  @command = N'/ISSERVER "\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::LOGGING_LEVEL(Int16)";1 /Par "$ServerOption::SYNCHRONIZED(Boolean)";True /CALLERINFO SQLAGENT /REPORTING E';
          END
          EOF
          if ! /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -i setup_job.sql; then
            echo "Error: Job setup failed."
            exit 1
          fi
          echo "Job setup completed."

      - name: Execute SQL Server Agent Job
        run: |
          if ! /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -Q "EXEC msdb.dbo.sp_start_job N'TimesheetProjectRun';"; then
            echo "Error: Job execution failed."
            exit 1
          fi
          echo "Job executed successfully."