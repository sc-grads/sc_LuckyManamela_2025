name: SQL Automation Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-sql:
    runs-on: ubuntu-latest
    
    # Optionally, set SA_PASSWORD for steps here
    env:
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        # Pass your secret directly to the container environment
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
        ports:
          - 1433:1433
        # Use a shell command that expands $SA_PASSWORD inside the container
        options: >-
          --health-cmd "/bin/sh -c '/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P $SA_PASSWORD -Q \"SELECT 1\" || exit 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Wait for SQL Server to be ready
        run: |
          # The runner also has SA_PASSWORD from env if you need to reference it here
          for i in {1..30}; do
            if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "$SA_PASSWORD" -Q "SELECT 1" &> /dev/null; then
              echo "SQL Server is ready"
              exit 0
            fi
            echo "Waiting for SQL Server to start..."
            sleep 2
          done
          echo "SQL Server did not start in time"
          exit 1

      - name: Install sqlcmd and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https gnupg2
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo "::add-path::/opt/mssql-tools/bin"

      - name: Run setup.sql
        run: |
          sqlcmd -S localhost -U SA -P "$SA_PASSWORD" -i setup.sql -b -o sqlcmd.log || (cat sqlcmd.log && exit 1)
          cat sqlcmd.log

      - name: Install ngrok
        run: |
          wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip -o ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin
          rm ngrok-stable-linux-amd64.zip

      - name: Start ngrok TCP tunnel
        run: |
          nohup ngrok tcp 1433 --authtoken ${{ secrets.NGROK_AUTH_TOKEN }} --log=stdout > ngrok.log 2>&1 &
          sleep 5
          curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'
          echo "ngrok tunnel started."

      - name: Cleanup ngrok (always run)
        if: always()
        run: |
          pkill ngrok || true
          rm -f ngrok.log
