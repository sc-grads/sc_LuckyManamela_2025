name: SQL Automation Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-sql:
    # Use ubuntu-22.04 to ensure Microsoft packages for sqlcmd are available
    runs-on: ubuntu-22.04

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "LuckyManamela@$2000"
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Wait for SQL Server to be ready
        run: sleep 30

      - name: Install sqlcmd and run setup.sql
        run: |
          # Install dependencies and add Microsoft repo
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https gnupg2
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list

          # Install mssql-tools (includes sqlcmd)
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev

          # Update PATH in this shell so subsequent commands can use sqlcmd immediately
          export PATH="$PATH:/opt/mssql-tools/bin"

          # Confirm sqlcmd is installed
          which sqlcmd

          # Execute your SQL script against the local SQL Server service
          sqlcmd -S localhost -U sa -P "LuckyManamela@$2000" -i setup.sql

      - name: Install ngrok
        run: |
          wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin

      - name: Start ngrok TCP tunnel
        run: |
          nohup ngrok tcp 1433 --authtoken ${{ secrets.NGROK_AUTH_TOKEN }} > ngrok.log 2>&1 &
          sleep 5
          echo "ngrok tunnel started."
