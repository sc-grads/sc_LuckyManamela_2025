name: Deploy TimesheetDB and Trigger Job

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'  
  workflow_dispatch:  

env:
  DATABASE_NAME: TimesheetDB
  JOB_NAME: 'RunDataMigrationPackage'
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server tools
        run: |
          # Clean up any old Microsoft sources
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo rm -f /etc/apt/sources.list.d/mssql-tools.list

          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y curl gnupg

          # Import Microsoft GPG key
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /tmp/microsoft-prod.gpg
          sudo mv /tmp/microsoft-prod.gpg /usr/share/keyrings/microsoft-prod.gpg
          chmod 644 /usr/share/keyrings/microsoft-prod.gpg

          # Use Ubuntu 22.04 (jammy) repo
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-tools.list

          # Update and install
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev

          # Add mssql-tools to PATH
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}

      - name: Test Network Connectivity
        run: |
          ping -c 4 "${{ env.SQL_SERVER_NAME }}" || echo "Ping failed, server may be unreachable"
          timeout 5 bash -c "echo > /dev/tcp/${{ env.SQL_SERVER_NAME }}/1433" && echo "Port 1433 is open" || echo "Port 1433 is closed or server is unreachable"
        shell: bash

      - name: Execute SQL Script
        run: |
          for attempt in 1 2 3; do
            if /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -N -C -d master -i scripts/TimesheetDB.sql -o output.log; then
              echo "SQL script executed successfully on attempt $attempt."
              cat output.log
              break
            else
              echo "Attempt $attempt failed, retrying... Check output.log"
              cat output.log 2>/dev/null || echo "No output.log created"
              [ $attempt -lt 3 ] && sleep 5
            fi
          done
          if [ $attempt -eq 3 ]; then
            echo "All retries failed. Exiting."
            exit 1
          fi
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}

  trigger-job:
    runs-on: [self-hosted, windows]
    needs: deploy-database
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check PowerShell Version
        run: $PSVersionTable.PSVersion
        shell: powershell

      - name: Enable PowerShell Script Execution
        run: |
          # Check current execution policy
          $currentPolicy = Get-ExecutionPolicy
          Write-Output "Current Execution Policy: $currentPolicy"

          # Set execution policy to RemoteSigned for the CurrentUser scope
          Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force

          # Verify the new execution policy
          $newPolicy = Get-ExecutionPolicy
          Write-Output "New Execution Policy: $newPolicy"
        shell: powershell

      - name: Trigger SQL Agent Job
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'${{ env.JOB_NAME }}'; PRINT 'Job started: ${{ env.JOB_NAME }}';"
          Write-Output "Executing SQL to start job: $sql"
          $sqlcmdOutput = sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -Q "$sql" -b 2>&1
          Write-Output $sqlcmdOutput
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Job trigger failed. Output: $sqlcmdOutput"
              exit $LASTEXITCODE
          }
        shell: powershell