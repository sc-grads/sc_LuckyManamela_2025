name: Full Deployment - TimesheetDB + SSIS + SQL Agent Job

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SSISDB_PASSWORD: ${{ secrets.SSISDB_PASSWORD }}
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Timesheets'
  PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
  SSIS_SOURCE_PATH: 'HandsOnProjects/TimesheetMigration/TimesheetMigration/bin/Development/TimesheetMigration.ispac'
  JOB_NAME: 'RunDataMigrationPackage'
  SQL_SERVER_LOCAL: 'SAMBE2025008'  # Adjust if needed

jobs:
  deploy-database:
    name: Deploy Database Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Run TimesheetDB SQL Script
        run: |
          sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d master -i "$GITHUB_WORKSPACE/scripts/TimesheetDB.sql"
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

  deploy-ssis:
    name: Deploy SSIS Project and Run Job
    runs-on: [self-hosted, windows]
    needs: deploy-database

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure PowerShell Execution Policy
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

      - name: Extract .ispac and Deploy Packages Using dtutil.exe
        shell: powershell
        run: |
          $ispacPath = Join-Path $env:GITHUB_WORKSPACE $env:SSIS_SOURCE_PATH
          if (-not (Test-Path $ispacPath)) {
              throw "ISPAC file not found at $ispacPath"
          }

          # Prepare extraction folder
          $extractFolder = Join-Path $env:GITHUB_WORKSPACE "extracted_ssis"
          if (Test-Path $extractFolder) { Remove-Item -Recurse -Force $extractFolder }
          New-Item -ItemType Directory -Path $extractFolder | Out-Null

          # Extract .ispac (zip archive) to get .dtsx packages
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($ispacPath, $extractFolder)

          # Find all .dtsx files inside extracted folder
          $packageFiles = Get-ChildItem -Path $extractFolder -Filter *.dtsx -Recurse
          if ($packageFiles.Count -eq 0) {
              throw "No .dtsx package files found after extracting .ispac"
          }

          # Locate dtutil.exe (adjust paths if needed)
          $dtutilPath = "C:\Program Files\Microsoft SQL Server\150\DTS\Binn\dtutil.exe"
          if (-not (Test-Path $dtutilPath)) {
              $dtutilPath = "C:\Program Files\Microsoft SQL Server\140\DTS\Binn\dtutil.exe"
          }
          if (-not (Test-Path $dtutilPath)) {
              throw "dtutil.exe not found in default locations."
          }

          # Deploy each package to SSIS catalog (Windows Authentication)
          foreach ($package in $packageFiles) {
              Write-Output "Deploying package: $($package.FullName)"
              $destFolder = "\\SSISDB\$env:SSIS_DEST_FOLDER\$env:SSIS_PROJECTS_FOLDER"
              $destPackagePath = "$destFolder\$($package.Name)"

              & $dtutilPath /FILE "$($package.FullName)" /COPY SQL"$destPackagePath" /SQLSERVER "$env:SQL_SERVER_NAME" /QUIET /ERRORLEVEL 1

              if ($LASTEXITCODE -ne 0) {
                  throw "dtutil.exe failed deploying package $($package.Name) with exit code $LASTEXITCODE"
              }
          }

      - name: Create SQL Agent Job if Missing
        shell: powershell
        run: |
          $packagePath = "/SSISDB/$env:SSIS_DEST_FOLDER/$env:SSIS_PROJECTS_FOLDER/$env:PACKAGE_NAME"
          $sql = @"
          USE msdb;
          IF NOT EXISTS (SELECT 1 FROM msdb.dbo.sysjobs WHERE name = N'$env:JOB_NAME')
          BEGIN
            DECLARE @jobId UNIQUEIDENTIFIER;
            EXEC msdb.dbo.sp_add_job
              @job_name = N'$env:JOB_NAME',
              @enabled = 1,
              @description = N'Data Migration SSIS Job',
              @start_step_id = 1,
              @owner_login_name = N'$env:SQL_USERNAME',
              @job_id = @jobId OUTPUT;

            EXEC msdb.dbo.sp_add_jobstep
              @job_id = @jobId,
              @step_id = 1,
              @step_name = N'RunMigrationStep',
              @subsystem = N'SSIS',
              @command = N'/ISSERVER \""$packagePath\"" /SERVER "$env:SQL_SERVER_NAME" /ENVREFERENCE 0',
              @database_name = N'master',
              @on_success_action = 1,
              @on_fail_action = 2;

            EXEC msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'$env:SQL_SERVER_LOCAL';
          END
          "@

          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql" -b

      - name: Start SQL Agent Job
        shell: powershell
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'$env:JOB_NAME';"
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql" -b
