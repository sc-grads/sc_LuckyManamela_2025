name: Full Deployment - TimesheetDB + SSIS + SQL Agent Job

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}  # Set to Sambe2025008 or localhost
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'TimesheetMigration'
  PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
  SSIS_SOURCE_PATH: 'HandsOnProjects/TimesheetMigration/TimesheetMigration/bin/Development/TimesheetMigration.ispac'
  JOB_NAME: 'RunDataMigrationPackage'
  SQL_SERVER_LOCAL: 'Sambe2025008'

jobs:
  deploy-database:
    name: Deploy Database Scripts
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server Tools
        run: |
          choco install sqlserver-odbcdriver -y
          choco install sqlserver-cmdlineutils -y
          $env:Path += ";C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\"
          [Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        shell: powershell

      - name: Run TimesheetDB SQL Script
        run: |
          sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -E -d master -i "$env:GITHUB_WORKSPACE/scripts/TimesheetDB.sql" -b
        shell: powershell
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

  deploy-ssis:
    name: Deploy SSIS Project and Create/Run SQL Agent Job
    runs-on: [self-hosted, windows]
    needs: deploy-database

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy SSIS Project to SSISDB
        shell: powershell
        run: |
          $ispacPath = Join-Path $env:GITHUB_WORKSPACE $env:SSIS_SOURCE_PATH
          if (-not (Test-Path $ispacPath)) {
              throw "ISPAC not found at $ispacPath"
          }

          [byte[]]$bytes = [System.IO.File]::ReadAllBytes($ispacPath)
          $hexString = [System.BitConverter]::ToString($bytes) -replace '-', ''

          $sql = @"
          IF NOT EXISTS (SELECT 1 FROM SSISDB.catalog.folders WHERE name = N'$env:SSIS_DEST_FOLDER')
          BEGIN
              EXEC SSISDB.catalog.create_folder @folder_name = N'$env:SSIS_DEST_FOLDER';
          END

          DECLARE @project_stream VARBINARY(MAX) = CONVERT(VARBINARY(MAX), 0x$hexString, 1);
          EXEC SSISDB.catalog.deploy_project
              @folder_name = N'$env:SSIS_DEST_FOLDER',
              @project_name = N'$env:SSIS_PROJECTS_FOLDER',
              @project_stream = @project_stream;
          "@

          $tempSqlPath = "$env:RUNNER_TEMP\deploy_ssis_project.sql"
          [System.IO.File]::WriteAllText($tempSqlPath, $sql)
          & sqlcmd -S $env:SQL_SERVER_NAME -E -d SSISDB -i $tempSqlPath -b
        env:
          SQL_SERVER_NAME: ${{ env.SQL_SERVER_NAME }}
          SSIS_DEST_FOLDER: ${{ env.SSIS_DEST_FOLDER }}
          SSIS_PROJECTS_FOLDER: ${{ env.SSIS_PROJECTS_FOLDER }}
          SSIS_SOURCE_PATH: ${{ env.SSIS_SOURCE_PATH }}
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Create SQL Agent Job to run SSIS package with 3 retries
        shell: powershell
        run: |
          $sql = @"
          USE msdb;

          IF NOT EXISTS (SELECT 1 FROM msdb.dbo.sysjobs WHERE name = N'$env:JOB_NAME')
          BEGIN
            DECLARE @jobId UNIQUEIDENTIFIER;

            EXEC msdb.dbo.sp_add_job
              @job_name = N'$env:JOB_NAME',
              @enabled = 1,
              @description = N'Schedule to run SSIS package with retry logic',
              @owner_login_name = SUSER_SNAME(),
              @job_id = @jobId OUTPUT;

            EXEC msdb.dbo.sp_add_jobstep
              @job_id = @jobId,
              @step_name = N'RunWithRetries',
              @subsystem = N'TSQL',
              @command = N'
                DECLARE @try INT = 1;
                DECLARE @max_tries INT = 3;
                DECLARE @execution_id BIGINT;
                DECLARE @execution_status INT;

                WHILE @try <= @max_tries
                BEGIN
                  EXEC SSISDB.catalog.create_execution
                    @package_name = N''$env:PACKAGE_NAME'',
                    @execution_id = @execution_id OUTPUT,
                    @folder_name = N''$env:SSIS_DEST_FOLDER'',
                    @project_name = N''$env:SSIS_PROJECTS_FOLDER'',
                    @use32bitruntime = 0,
                    @reference_id = NULL;

                  EXEC SSISDB.catalog.start_execution @execution_id, @retry_count = 0, @synchronous = 1;

                  WAITFOR DELAY ''00:00:10'';

                  SELECT @execution_status = status
                  FROM SSISDB.catalog.executions
                  WHERE execution_id = @execution_id;

                  IF @execution_status = 7 -- Success
                    BREAK;

                  SET @try += 1;
                END

                IF @execution_status <> 7
                  THROW 50000, ''SSIS package failed after 3 attempts.'', 1;
              ',
              @database_name = N'master',
              @on_success_action = 1,
              @on_fail_action = 2;

            EXEC msdb.dbo.sp_add_jobserver
              @job_id = @jobId,
              @server_name = N'$env:SQL_SERVER_LOCAL';
          END
          "@

          Write-Host "Generated SQL: $sql"
          $tempSqlPath = "$env:RUNNER_TEMP\create_agent_job.sql"
          [System.IO.File]::WriteAllText($tempSqlPath, $sql)
          & sqlcmd -S $env:SQL_SERVER_NAME -E -i $tempSqlPath -b

          if ($LASTEXITCODE -ne 0) {
              throw "SQL Agent job creation failed with exit code $LASTEXITCODE"
          }
        env:
          SQL_SERVER_NAME: ${{ env.SQL_SERVER_NAME }}
          SSIS_DEST_FOLDER: ${{ env.SSIS_DEST_FOLDER }}
          SSIS_PROJECTS_FOLDER: ${{ env.SSIS_PROJECTS_FOLDER }}
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
          JOB_NAME: ${{ env.JOB_NAME }}
          SQL_SERVER_LOCAL: ${{ env.SQL_SERVER_LOCAL }}
          RUNNER_TEMP: ${{ runner.temp }}

      - name: Start SQL Agent Job
        shell: powershell
        run: |
          & sqlcmd -S $env:SQL_SERVER_NAME -E -Q "EXEC msdb.dbo.sp_start_job @job_name = N'$env:JOB_NAME';" -b
        env:
          SQL_SERVER_NAME: ${{ env.SQL_SERVER_NAME }}
          JOB_NAME: ${{ env.JOB_NAME }}