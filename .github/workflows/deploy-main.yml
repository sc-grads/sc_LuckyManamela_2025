name: Full Deployment - TimesheetDB + SSIS + SQL Agent Job

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SSISDB_PASSWORD: ${{ secrets.SSISDB_PASSWORD }}
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Timesheets'
  PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
  SSIS_SOURCE_PATH: 'HandsOnProjects/TimesheetMigration/TimesheetMigration/bin/Development/TimesheetMigration.ispac'
  JOB_NAME: 'RunDataMigrationPackage'
  SQL_SERVER_LOCAL: 'SAMBE2025008'  # Adjust if needed (for job execution, usually the SQL Server hostname)

jobs:
  deploy-database:
    name: Deploy Database Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Run TimesheetDB SQL Script
        run: |
          /opt/mssql-tools/bin/sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d master -i scripts/TimesheetDB.sql

  deploy-ssis:
    name: Deploy SSIS Project and Run Job
    runs-on: [self-hosted, windows]
    needs: deploy-database

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure PowerShell Execution Policy
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

      - name: Check and Create SSISDB Catalog if Missing
        shell: powershell
        run: |
          $checkDbExists = @"
          SELECT COUNT(*) FROM sys.databases WHERE name = 'SSISDB';
          "@
          $exists = sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -d master -Q $checkDbExists -h -1
          if ($exists.Trim() -eq '0') {
              Write-Output "SSISDB database not found. Creating SSISDB catalog..."
              $createCatalogSql = "EXEC catalog.create_catalog @password = '$env:SSISDB_PASSWORD';"
              sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -d master -Q $createCatalogSql -b
              Write-Output "SSISDB catalog created."
          }
          else {
              Write-Output "SSISDB database already exists."
          }

      - name: Create SSIS Folder if Missing
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB;
          IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = N'$env:SSIS_DEST_FOLDER')
          BEGIN
            EXEC catalog.create_folder @folder_name = N'$env:SSIS_DEST_FOLDER';
          END
          "@
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql" -b

      - name: Ensure PowerShell Execution Policy
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

      - name: Install .NET SDK (required for dotnet tool)
        shell: powershell
        run: |
          choco install dotnet-7.0-sdk -y

      - name: Install SqlPackage via .NET tool
        shell: powershell
        run: |
          dotnet tool install -g microsoft.sqlpackage
          sqlpackage /version
      
      - name: Deploy SSIS Project
        shell: powershell
        run: |
          $ispacPath = Join-Path $env:GITHUB_WORKSPACE $env:SSIS_SOURCE_PATH
          if (-not (Test-Path $ispacPath)) {
              throw "ISPAC not found at $ispacPath"
          }

          $isDeploymentWizardPath = "C:\Program Files\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          if (-not (Test-Path $isDeploymentWizardPath)) {
              throw "ISDeploymentWizard.exe not found at $isDeploymentWizardPath"
          }

          & $isDeploymentWizardPath /Silent /SourcePath:$ispacPath /DestinationServer:$env:SQL_SERVER_NAME /DestinationPath:"\$env:SSIS_DEST_FOLDER"


      - name: Grant SSIS Project Permissions
        shell: powershell
        run: |
          $sql = @"
          DECLARE @project_id bigint;
          SELECT @project_id = project_id
          FROM SSISDB.catalog.projects
          WHERE name = N'$env:SSIS_PROJECTS_FOLDER' AND folder_id = (
              SELECT folder_id FROM SSISDB.catalog.folders WHERE name = N'$env:SSIS_DEST_FOLDER'
          );

          IF @project_id IS NOT NULL
          BEGIN
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=1, @permission_type=1;
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=1, @permission_type=2;
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=1, @permission_type=3;
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=1, @permission_type=4;
          END
          "@
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql" -b

      - name: Create SQL Agent Job if Missing
        shell: powershell
        run: |
          $sql = @"
          USE msdb;
          IF NOT EXISTS (SELECT 1 FROM msdb.dbo.sysjobs WHERE name = N'$env:JOB_NAME')
          BEGIN
            DECLARE @jobId UNIQUEIDENTIFIER;
            EXEC msdb.dbo.sp_add_job
              @job_name = N'$env:JOB_NAME',
              @enabled = 1,
              @description = N'Data Migration SSIS Job',
              @start_step_id = 1,
              @owner_login_name = SYSTEM_USER,
              @job_id = @jobId OUTPUT;

            EXEC msdb.dbo.sp_add_jobstep
              @job_id = @jobId,
              @step_id = 1,
              @step_name = N'RunMigrationStep',
              @subsystem = N'SSIS',
              @command = N'/ISSERVER "\SSISDB\$env:SSIS_DEST_FOLDER\$env:SSIS_PROJECTS_FOLDER\$env:PACKAGE_NAME" /SERVER "$env:SQL_SERVER_NAME" /REPORTING E',
              @database_name = N'master',
              @on_success_action = 1,
              @on_fail_action = 2;

            EXEC msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)';
          END
          "@
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql" -b

      - name: Start SQL Agent Job
        shell: powershell
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'$env:JOB_NAME';"
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql" -b
