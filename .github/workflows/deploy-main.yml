name: Full Deployment - TimesheetDB + SSIS + SQL Agent Job

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SSISDB_PASSWORD: ${{ secrets.SSISDB_PASSWORD }}
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Timesheets'
  PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
  SSIS_SOURCE_PATH: 'HandsOnProjects/TimesheetMigration/TimesheetMigration/bin/Development/TimesheetMigration.ispac'
  JOB_NAME: 'RunDataMigrationPackage'
  SQL_SERVER_LOCAL: 'SAMBE2025008'
  GITHUB_WORKSPACE: ${{ github.workspace }}

jobs:
  deploy-database:
    name: Deploy TimesheetDB Schema
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev

      - name: Run TimesheetDB SQL Script
        run: |
          /opt/mssql-tools/bin/sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d master -i "${{ github.workspace }}/scripts/TimesheetDB.sql"

  deploy-ssis:
    name: Deploy SSIS Project & Create Job
    runs-on: [self-hosted, windows]
    needs: deploy-database

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure PowerShell Execution Policy
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

      - name: Create SSISDB Catalog if Missing
        shell: powershell
        run: |
          $exists = sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "SELECT COUNT(*) FROM sys.databases WHERE name = 'SSISDB';" -h -1
          if ($exists.Trim() -eq '0') {
              Write-Output "Creating SSISDB catalog..."
              sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "EXEC catalog.create_catalog @password = '$env:SSISDB_PASSWORD';"
          }

      - name: Create SSIS Folder if Missing
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB;
          IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = N'$env:SSIS_DEST_FOLDER')
            EXEC catalog.create_folder @folder_name = N'$env:SSIS_DEST_FOLDER';
          "@
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql"

      - name: Deploy SSIS Project
        shell: powershell
        run: |
          $ispacPath = Join-Path $env:GITHUB_WORKSPACE $env:SSIS_SOURCE_PATH
          if (-not (Test-Path $ispacPath)) {
              throw "ISPAC not found at $ispacPath"
          }

          $deployExe = "C:\Program Files\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          if (-not (Test-Path $deployExe)) {
              throw "ISDeploymentWizard.exe not found."
          }

          & $deployExe /Silent `
              /SourcePath:"$ispacPath" `
              /DestinationServer:"$env:SQL_SERVER_NAME" `
              /DestinationPath:"\SSISDB\$env:SSIS_DEST_FOLDER" `
              /User:"$env:SQL_USERNAME" `
              /Password:"$env:SQL_PASSWORD" `
              /ProjectPassword:"$env:SSISDB_PASSWORD"

      - name: Grant SSIS Permissions
        shell: powershell
        run: |
          $sql = @"
          DECLARE @project_id bigint, @principal_id int;
          SELECT @project_id = project_id
          FROM SSISDB.catalog.projects
          WHERE name = N'$env:SSIS_PROJECTS_FOLDER'
            AND folder_id = (SELECT folder_id FROM SSISDB.catalog.folders WHERE name = N'$env:SSIS_DEST_FOLDER');

          SET @principal_id = USER_ID(N'$env:SQL_USERNAME');

          IF @project_id IS NOT NULL AND @principal_id IS NOT NULL
          BEGIN
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=@principal_id, @permission_type=1;
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=@principal_id, @permission_type=2;
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=@principal_id, @permission_type=3;
              EXEC SSISDB.catalog.grant_permission @object_type=2, @object_id=@project_id, @principal_id=@principal_id, @permission_type=4;
          END
          "@
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -d SSISDB -Q "$sql"

      - name: Create SQL Agent Job
        shell: powershell
        run: |
          $packagePath = "/SSISDB/$env:SSIS_DEST_FOLDER/$env:SSIS_PROJECTS_FOLDER/$env:PACKAGE_NAME"
          $sql = @"
          USE msdb;
          IF NOT EXISTS (SELECT 1 FROM msdb.dbo.sysjobs WHERE name = N'$env:JOB_NAME')
          BEGIN
              DECLARE @jobId UNIQUEIDENTIFIER;
              EXEC msdb.dbo.sp_add_job
                  @job_name = N'$env:JOB_NAME',
                  @enabled = 1,
                  @description = N'Data Migration SSIS Job',
                  @start_step_id = 1,
                  @owner_login_name = N'$env:SQL_USERNAME',
                  @job_id = @jobId OUTPUT;

              EXEC msdb.dbo.sp_add_jobstep
                  @job_id = @jobId,
                  @step_id = 1,
                  @step_name = N'RunMigrationStep',
                  @subsystem = N'SSIS',
                  @command = N'/ISSERVER \""$packagePath\"" /SERVER "$env:SQL_SERVER_NAME" /ENVREFERENCE 0',
                  @database_name = N'master',
                  @on_success_action = 1,
                  @on_fail_action = 2;

              EXEC msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'$env:SQL_SERVER_LOCAL';
          END
          "@
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "$sql"

      - name: Start SQL Agent Job
        shell: powershell
        run: |
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "EXEC msdb.dbo.sp_start_job @job_name = N'$env:JOB_NAME';"
          Start-Sleep -Seconds 15
          sqlcmd -S $env:SQL_SERVER_NAME -U $env:SQL_USERNAME -P $env:SQL_PASSWORD -Q "SELECT TOP 5 step_name, message, run_status FROM msdb.dbo.sysjobhistory h JOIN msdb.dbo.sysjobs j ON h.job_id = j.job_id WHERE j.name = '$env:JOB_NAME' ORDER BY run_date DESC, run_time DESC;"
