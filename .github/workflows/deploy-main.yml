name: Deploy TimesheetDB, SSIS Package, and Run Data Migration

on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/Timesheets/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:

env:
  DATABASE_NAME: TimesheetDB
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Timesheets'
  JOB_NAME: 'RunDataMigrationPackage'
  PACKAGE_NAME: 'DataMigrationFINAL'
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Projects/Timesheets/Packages
  SSIS_PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQL Server tools
        run: |
          sudo rm -f /etc/apt/sources.list.d/msprod.list
          sudo rm -f /etc/apt/sources.list.d/mssql-tools.list

          sudo apt-get update
          sudo apt-get install -y curl gnupg

          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /tmp/microsoft-prod.gpg
          sudo mv /tmp/microsoft-prod.gpg /usr/share/keyrings/microsoft-prod.gpg
          chmod 644 /usr/share/keyrings/microsoft-prod.gpg

          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/mssql-tools.list

          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev

          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}

      - name: Test SQL Server connectivity
        run: |
          ping -c 4 "${{ env.SQL_SERVER_NAME }}" || echo "Ping failed"
          timeout 5 bash -c "echo > /dev/tcp/${{ env.SQL_SERVER_NAME }}/1433" && echo "Port 1433 is open" || echo "Port 1433 closed"
        shell: bash

      - name: Execute SQL script
        run: |
          for attempt in 1 2 3; do
            if /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -N -C -d master -i scripts/TimesheetDB.sql -o output.log; then
              cat output.log
              break
            else
              echo "Attempt $attempt failed"
              cat output.log || echo "No output"
              [ $attempt -lt 3 ] && sleep 5
            fi
          done
        shell: bash

  setup-and-execute-job:
    runs-on: [self-hosted, windows]
    needs: deploy-database
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bypass PowerShell script policy
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Install SQLCMD
        run: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/go-sqlcmd/releases/download/v1.8.2/sqlcmd-windows-amd64.zip" -OutFile sqlcmd.zip
          Expand-Archive -Path sqlcmd.zip -DestinationPath C:\sqlcmd -Force
          echo "C:\sqlcmd" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Create SSIS folder if not exists
        shell: powershell
        run: |
          $sql = @"
          IF NOT EXISTS (SELECT 1 FROM [catalog].[folders] WHERE name = '${{ env.SSIS_DEST_FOLDER }}')
              EXEC [catalog].[create_folder] @folder_name = N'${{ env.SSIS_DEST_FOLDER }}';
          "@
          sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -Q "$sql" -b

      - name: Deploy ISPAC to SSIS
        shell: powershell
        run: |
          $ispacPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ env.SSIS_SOURCE_PATH }}"
          $sql = @"
          DECLARE @ispac varbinary(max);
          SELECT @ispac = BulkColumn
          FROM OPENROWSET(BULK '$ispacPath', SINGLE_BLOB) AS ProjectBinary;
          EXEC [SSISDB].[catalog].[deploy_project]
              @folder_name=N'${{ env.SSIS_DEST_FOLDER }}',
              @project_name=N'${{ env.SSIS_PROJECTS_FOLDER }}',
              @project_stream=@ispac;
          "@
          $tempSql = "$env:GITHUB_WORKSPACE\deploy_ssis.sql"
          Set-Content -Path $tempSql -Value $sql -Force
          sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -i $tempSql -b

      - name: Create SQL Agent job
        shell: powershell
        run: |
          $sql = @"
          USE [msdb];
          IF NOT EXISTS (SELECT name FROM msdb.dbo.sysjobs WHERE name = '${{ env.JOB_NAME }}')
          BEGIN
              DECLARE @jobId BINARY(16)
              EXEC msdb.dbo.sp_add_job @job_name=N'${{ env.JOB_NAME }}', @enabled=1, @owner_login_name=N'sa', @job_id = @jobId OUTPUT
              EXEC msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'LoadTimeSheetData',
                  @subsystem=N'SSIS',
                  @command=N'/ISSERVER "\SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECTS_FOLDER }}\${{ env.PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::SYNCHRONIZED(Boolean)";True',
                  @database_name=N'master'
              EXEC msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
          END
          "@
          $tempSql = "$env:GITHUB_WORKSPACE\create_job.sql"
          Set-Content -Path $tempSql -Value $sql -Force
          sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -i $tempSql -b

      - name: Start Data Migration job
        shell: powershell
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'${{ env.JOB_NAME }}';"
          sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -Q "$sql" -b
