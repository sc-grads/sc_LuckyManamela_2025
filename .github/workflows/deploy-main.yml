name: Deploy TimesheetDB, SSIS Package, and Run Data Migration
 
on:
  push:
    branches:
      - main
    paths:
      - 'scripts/**'
      - 'HandsOnProjects/Timesheets/**'
      - 'HandsOnProjects/TimesheetMigration/TimesheetMigration/**'
  workflow_dispatch:
 
env:
  DATABASE_NAME: TimesheetDB
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Timesheets'
  JOB_NAME: 'RunDataMigrationPackage'
  PACKAGE_NAME: 'DataMigrationFINAL'
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Projects/Timesheets/Packages
  SSIS_PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
 
jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
 
      - name: Install SQL Server tools
        run: |
          # Clean up any old Microsoft sources
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo rm -f /etc/apt/sources.list.d/mssql-tools.list
 
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y curl gnupg
 
          # Import Microsoft GPG key
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /tmp/microsoft-prod.gpg
          sudo mv /tmp/microsoft-prod.gpg /usr/share/keyrings/microsoft-prod.gpg
          chmod 644 /usr/share/keyrings/microsoft-prod.gpg
 
          # Use Ubuntu 22.04 (jammy) repo instead of 24.04 (noble)
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-tools.list
 
          # Update and install
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
 
          # Add mssql-tools to PATH
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
 
      - name: Test Network Connectivity
        run: |
          ping -c 4 "${{ env.SQL_SERVER_NAME }}" || echo "Ping failed, server may be unreachable"
          timeout 5 bash -c "echo > /dev/tcp/${{ env.SQL_SERVER_NAME }}/1433" && echo "Port 1433 is open" || echo "Port 1433 is closed or server is unreachable"
        shell: bash
 
      - name: Execute SQL Script
        run: |
          for attempt in 1 2 3; do
            if /opt/mssql-tools/bin/sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -N -C -d master -i scripts/TimesheetDB.sql -o output.log; then
              echo "SQL script executed successfully on attempt $attempt."
              cat output.log
              break
            else
              echo "Attempt $attempt failed, retrying... Check output.log"
              cat output.log 2>/dev/null || echo "No output.log created"
              [ $attempt -lt 3 ] && sleep 5
            fi
          done
          if [ $attempt -eq 3 ]; then
            echo "All retries failed. Exiting."
            exit 1
          fi
        shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
 
  setup-and-execute-job:
    runs-on: [self-hosted, windows]
    needs: deploy-database
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
 
      - name: Check PowerShell Version
        run: $PSVersionTable.PSVersion
        shell: powershell
 
      - name: Set PowerShell Execution Policy
        run: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force
        shell: powershell
 
      - name: Debug Working Directory and File Location
        shell: powershell
        run: |
          Write-Output "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          dir "$env:GITHUB_WORKSPACE\HandsOnProjects\Timesheets\bin\Development" -ErrorAction Continue
 
      - name: Install SQLCMD
        run: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/go-sqlcmd/releases/download/v1.8.2/sqlcmd-windows-amd64.zip" -OutFile sqlcmd.zip
          Expand-Archive -Path sqlcmd.zip -DestinationPath C:\sqlcmd -Force
          echo "C:\sqlcmd" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
 
      - name: Create SSIS Catalog Folder (if not exists)
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB;
          BEGIN TRY
              IF NOT EXISTS (SELECT 1 FROM [catalog].[folders] WHERE name = '${{ env.SSIS_DEST_FOLDER }}')
              BEGIN
                  EXEC [catalog].[create_folder] @folder_name = N'${{ env.SSIS_DEST_FOLDER }}';
                  Write-Output 'Created SSIS folder: ${{ env.SSIS_DEST_FOLDER }}';
              END
              ELSE
              BEGIN
                  Write-Output 'Folder already exists: ${{ env.SSIS_DEST_FOLDER }}';
              END
          END TRY
          BEGIN CATCH
              Write-Error "Error creating folder: $_"
              exit 1
          END CATCH
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -Q "$sql" -b 2>&1
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Folder creation failed. Output: $result"
              exit 1
          }