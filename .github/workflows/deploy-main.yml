name: Deploy SSIS Package and Run Data Migration

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'HandsOnProjects/Timesheets/**'

env:
  SQL_SERVER: 'MANAMELA'
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: 'TimesheetDataMigration'
  SSIS_PROJECT_NAME: 'TimesheetMigration'
  SSIS_PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
  JOB_NAME: 'DeploymentJob'
  JOB_OWNER: 'Manamela\kgali'

jobs:
  deploy-and-run:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug .ispac path
        shell: powershell
        run: |
          Write-Output "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          $fullPath = Join-Path $env:GITHUB_WORKSPACE "${{ env.SSIS_SOURCE_PATH }}"
          if (Test-Path $fullPath) {
              Write-Output "Found .ispac at $fullPath"
          } else {
              Write-Error "Missing .ispac file at $fullPath"
              exit 1
          }

      - name: Create SSISDB folder if not exists
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB;
          BEGIN TRY
              IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = N'${{ env.SSIS_DEST_FOLDER }}')
                  EXEC catalog.create_folder @folder_name = N'${{ env.SSIS_DEST_FOLDER }}';
          END TRY
          BEGIN CATCH
              THROW;
          END CATCH
          "@
          sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql"

      - name: Deploy ISPAC to SSISDB
        shell: powershell
        run: |
          $ispacPath = Join-Path $env:GITHUB_WORKSPACE "${{ env.SSIS_SOURCE_PATH }}"
          if (-not (Test-Path $ispacPath)) {
              Write-Error "ISPAC file not found at: $ispacPath"
              exit 1
          }

          $sql = @"
          DECLARE @ispac varbinary(max);
          SELECT @ispac = BulkColumn
          FROM OPENROWSET(BULK '$ispacPath', SINGLE_BLOB) AS ProjectBinary;
          EXEC SSISDB.catalog.deploy_project
              @folder_name = N'${{ env.SSIS_DEST_FOLDER }}',
              @project_name = N'${{ env.SSIS_PROJECT_NAME }}',
              @project_stream = @ispac;
          "@
          $tempFile = Join-Path $env:GITHUB_WORKSPACE "deploy_project.sql"
          Set-Content -Path $tempFile -Value $sql -Force

          sqlcmd -S "${{ env.SQL_SERVER }}" -i $tempFile -b

      - name: Create SQL Agent Job (DeploymentJob)
        shell: powershell
        run: |
          $sql = @"
          USE [msdb];
          BEGIN TRANSACTION
          DECLARE @ReturnCode INT
          SELECT @ReturnCode = 0
          IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
              EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'

          DECLARE @jobId BINARY(16)
          IF NOT EXISTS (SELECT name FROM msdb.dbo.sysjobs WHERE name = N'${{ env.JOB_NAME }}')
          BEGIN
              EXEC @ReturnCode = msdb.dbo.sp_add_job @job_name=N'${{ env.JOB_NAME }}',
                  @enabled=1,
                  @description=N'Deploys and runs the SSIS package',
                  @category_name=N'[Uncategorized (Local)]',
                  @owner_login_name=N'${{ env.JOB_OWNER }}',
                  @job_id = @jobId OUTPUT

              EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId,
                  @step_name=N'RunSSISpackage',
                  @subsystem=N'SSIS',
                  @command=N'/ISSERVER "\"\SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER "${{ env.SQL_SERVER }}" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E',
                  @database_name=N'master',
                  @on_success_action=1,
                  @on_fail_action=2,
                  @step_id=1

              EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
              EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
              PRINT 'Created SQL Agent Job: ${{ env.JOB_NAME }}'
          END
          ELSE
          BEGIN
              PRINT 'SQL Agent Job already exists: ${{ env.JOB_NAME }}'
          END
          COMMIT TRANSACTION
          "@

          $file = Join-Path $env:GITHUB_WORKSPACE "create_job.sql"
          Set-Content -Path $file -Value $sql -Force
          sqlcmd -S "${{ env.SQL_SERVER }}" -i $file -b

      - name: Run SQL Agent Job
        shell: powershell
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'${{ env.JOB_NAME }}'"
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql" -b
          Write-Output "Job '${{ env.JOB_NAME }}' triggered."
