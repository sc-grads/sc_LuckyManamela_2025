name: Deploy SSIS Packages

on:
  repository_dispatch:
    types: [deploy_ssis]
  workflow_dispatch:

env:
  SSIS_PACKAGE_NAME: 'TimeSheetMigration 1.dtsx'
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Projects/Timesheets/Packages
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}

jobs:
  deploy-ssis:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure PowerShell execution policy
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

      - name: Deploy SSIS Package
        shell: powershell
        run: |
          $packagePath = Join-Path $env:GITHUB_WORKSPACE "HandsOnProjects\TimesheetMigration\TimesheetMigration\${{ env.SSIS_PACKAGE_NAME }}"
          if (-not (Test-Path $packagePath)) {
              throw "SSIS package not found at $packagePath"
          }
          $folderName = '${{ env.SSIS_FOLDER_NAME }}'
          $projectName = '${{ env.SSIS_PROJECT_NAME }}'
          $server = '${{ env.SQL_SERVER_NAME }}'
          $username = '${{ env.SQL_USERNAME }}'
          $password = '${{ env.SQL_PASSWORD }}'

          # Create folder if missing
          $createFolderSQL = @"
          USE SSISDB;
          IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = N'$folderName')
          BEGIN
            EXEC catalog.create_folder @folder_name = N'$folderName';
          END
          "@
          sqlcmd -S $server -U $username -P $password -d SSISDB -Q $createFolderSQL

          # Deploy or update project
          $deploySQL = @"
          USE SSISDB;
          DECLARE @folder_id bigint = (SELECT folder_id FROM catalog.folders WHERE name = N'$folderName');
          DECLARE @project_binary varbinary(max) = (SELECT BulkColumn FROM OPENROWSET(BULK N'$packagePath', SINGLE_BLOB) AS BinaryData);
          IF NOT EXISTS (SELECT 1 FROM catalog.projects WHERE name = N'$projectName' AND folder_id = @folder_id)
          BEGIN
            EXEC catalog.deploy_project @folder_name = N'$folderName', @project_name = N'$projectName', @project_stream = @project_binary;
          END
          ELSE
          BEGIN
            EXEC catalog.update_project @folder_name = N'$folderName', @project_name = N'$projectName', @project_stream = @project_binary;
          END
          "@
          sqlcmd -S $server -U $username -P $password -d SSISDB -Q $deploySQL
          Write-Output "SSIS package deployed successfully."
