name: Deploy SSIS Packages

on:
  repository_dispatch:
    types: [deploy_ssis]
  workflow_dispatch:

env:
  SSIS_PACKAGE_NAME: TimeSheetMigration 1.dtsx
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Projects/Timesheets/Packages
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}

jobs:
  deploy-ssis:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SQLCMD
        run: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/go-sqlcmd/releases/download/v1.5.0/sqlcmd-1.5.0-windows-amd64.zip" -OutFile sqlcmd.zip
          Expand-Archive -Path sqlcmd.zip -DestinationPath sqlcmd
          echo "C:\sqlcmd" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Deploy SSIS Package
        run: |
          $packagePath = "${{ github.workspace }}\HandsOnProjects\TimesheetMigration\TimesheetMigration\${{ env.SSIS_PACKAGE_NAME }}"
          if (-not (Test-Path $packagePath)) { throw "SSIS package not found at $packagePath" }
          $server = "${{ env.SQL_SERVER_NAME }}"
          $folderName = "${{ env.SSIS_FOLDER_NAME }}"
          $projectName = "${{ env.SSIS_PROJECT_NAME }}"

          # Create SSISDB folder if it doesn't exist
          $sqlCreateFolder = @"
          USE SSISDB;
          IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = N'$folderName')
          BEGIN
              EXEC catalog.create_folder @folder_name = N'$folderName';
          END
          "@
          echo "$sqlCreateFolder" | sqlcmd -S "$server" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d SSISDB

          # Deploy package as a project
          $deploySql = @"
          USE SSISDB;
          DECLARE @folder_id bigint = (SELECT folder_id FROM catalog.folders WHERE name = N'$folderName');
          DECLARE @project_binary varbinary(max) = (SELECT * FROM OPENROWSET(BULK N'$packagePath', SINGLE_BLOB) AS BinaryData);
          IF NOT EXISTS (SELECT 1 FROM catalog.projects WHERE name = N'$projectName' AND folder_id = @folder_id)
          BEGIN
              EXEC catalog.deploy_project @folder_name = N'$folderName', @project_name = N'$projectName', @project_stream = @project_binary;
          END
          ELSE
          BEGIN
              EXEC catalog.update_project @folder_name = N'$folderName', @project_name = N'$projectName', @project_stream = @project_binary;
          END
          "@
          echo "$deploySql" | sqlcmd -S "$server" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d SSISDB
        shell: pwsh